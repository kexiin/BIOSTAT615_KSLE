// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Arnoldi_Cpp
List Arnoldi_Cpp(const Eigen::MatrixXd& A, Eigen::MatrixXd V, Eigen::MatrixXd H, int start, int n, int m);
RcppExport SEXP _KSLE_Arnoldi_Cpp(SEXP ASEXP, SEXP VSEXP, SEXP HSEXP, SEXP startSEXP, SEXP nSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type V(VSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type H(HSEXP);
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(Arnoldi_Cpp(A, V, H, start, n, m));
    return rcpp_result_gen;
END_RCPP
}
// GivensRotation_Cpp
List GivensRotation_Cpp(Eigen::MatrixXd H1, double sigma, int m);
RcppExport SEXP _KSLE_GivensRotation_Cpp(SEXP H1SEXP, SEXP sigmaSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type H1(H1SEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(GivensRotation_Cpp(H1, sigma, m));
    return rcpp_result_gen;
END_RCPP
}
// orthogonalization
Eigen::VectorXd orthogonalization(Eigen::VectorXd x, const Eigen::MatrixXd& A);
RcppExport SEXP _KSLE_orthogonalization(SEXP xSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(orthogonalization(x, A));
    return rcpp_result_gen;
END_RCPP
}
// truncate_and_expand_Cpp
List truncate_and_expand_Cpp(const Eigen::MatrixXd& A, Eigen::MatrixXd V, Eigen::VectorXd u, Eigen::VectorXd b1, Eigen::MatrixXd Tm, Eigen::MatrixXd Sm, int n, int m, int k, double tol0);
RcppExport SEXP _KSLE_truncate_and_expand_Cpp(SEXP ASEXP, SEXP VSEXP, SEXP uSEXP, SEXP b1SEXP, SEXP TmSEXP, SEXP SmSEXP, SEXP nSEXP, SEXP mSEXP, SEXP kSEXP, SEXP tol0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type V(VSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type u(uSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Tm(TmSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Sm(SmSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type tol0(tol0SEXP);
    rcpp_result_gen = Rcpp::wrap(truncate_and_expand_Cpp(A, V, u, b1, Tm, Sm, n, m, k, tol0));
    return rcpp_result_gen;
END_RCPP
}
// HouseholderTransform_Cpp
List HouseholderTransform_Cpp(int start, Eigen::MatrixXd& S1, Eigen::MatrixXd& V);
RcppExport SEXP _KSLE_HouseholderTransform_Cpp(SEXP startSEXP, SEXP S1SEXP, SEXP VSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type start(startSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type S1(S1SEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type V(VSEXP);
    rcpp_result_gen = Rcpp::wrap(HouseholderTransform_Cpp(start, S1, V));
    return rcpp_result_gen;
END_RCPP
}
// norm2
double norm2(const Eigen::VectorXd& x);
RcppExport SEXP _KSLE_norm2(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(norm2(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_KSLE_Arnoldi_Cpp", (DL_FUNC) &_KSLE_Arnoldi_Cpp, 6},
    {"_KSLE_GivensRotation_Cpp", (DL_FUNC) &_KSLE_GivensRotation_Cpp, 3},
    {"_KSLE_orthogonalization", (DL_FUNC) &_KSLE_orthogonalization, 2},
    {"_KSLE_truncate_and_expand_Cpp", (DL_FUNC) &_KSLE_truncate_and_expand_Cpp, 10},
    {"_KSLE_HouseholderTransform_Cpp", (DL_FUNC) &_KSLE_HouseholderTransform_Cpp, 3},
    {"_KSLE_norm2", (DL_FUNC) &_KSLE_norm2, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_KSLE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
